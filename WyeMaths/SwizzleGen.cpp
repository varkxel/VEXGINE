#include <WyeGen.hpp>

#include <vector>

using Wyevern::WyeGen;
using std::size_t;

std::vector<std::string> Permutations(const std::string& components, const unsigned maxDimensions)
{
	const size_t componentsSize = components.size();

	std::vector<std::string> results;

	for(unsigned dimensions = 1; dimensions <= maxDimensions; ++dimensions)
	{
		// Calculate permutations: equivalent of pow(componentsSize, dimensions)
		size_t permutations = componentsSize;
		for(unsigned i = 1; i < dimensions; ++i)
		{
			permutations *= componentsSize;
		}

		for(size_t permutation = 0; permutation < permutations; ++permutation)
		{
			std::string result;

			for(unsigned index = 0; index < dimensions; ++index)
			{
				// Calculate permutation divisor by pow(componentsSize, index)
				size_t divisor = (index == 0) ? 1 : componentsSize;
				for(unsigned i = 1; i < index; ++i)
				{
					divisor *= componentsSize;
				}

				const size_t componentIndex = (permutation / divisor) % componentsSize;
				result.push_back(components[componentIndex]);
			}
			results.push_back(result);
		}
	}

	return results;
}

#include <iostream>

int main()
{
	std::vector<std::string> swizzles = Permutations("xyzw", 4);
	for (const auto& swizzle : swizzles)
	{
		std::cout << swizzle << std::endl;
	}
#if 0
	for(int vectorIndex = 2; vectorIndex <= 4; ++vectorIndex)
	{
		const std::string vectorIndexString = std::to_string(vectorIndex);
		const std::string filename = "Vector" + vectorIndexString + ".hpp";

		WyeGen vector(filename);
		vector.Comment_Multiline
		(
			"== Wyevern Game Engine ==\n"
			"This file is automatically generated on build and is internal to the engine.\n"
			"Please do not directly include or modify this file."
		);
		vector.Space();

		const std::string guard = "WYEMATHS_GENERATED_VECTOR" + vectorIndexString + "_INCLUDED";
		vector.Macro_IfDefined_Not(guard);
		vector.Macro_Define(guard);
		vector.Space();

		vector.Macro_IfDefined_End();
	}
#endif
}
